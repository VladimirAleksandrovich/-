using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;

namespace Упаковка_Распаковка
{
    struct Point
    {
        public int x, y;
    }

    class Program
    {
        static void Main(string[] args)
        {
            //Упаковка распаковка значимых типов
            ArrayList a = new ArrayList();
            Point p;            //Выделение памяти для Пойнт (не в куче)
            for (int i = 0; i < 10; i++)
            {
                p.x = p.y = i;  //Инициализация членов в значином типе
                a.Add(p);       //Упаковка (boxing) значимого типа и добавление ссылки в Аррай
                                // При УПАКОВКЕ происходит следующее:
                                //1.В куче выделяется память
                                //2. Поля значимого типа копируются в память, только что выделенную в куче
                                //3.Возвращается адрес объекта (ссылка) и значимый тип становится ссылочным
            }
            Point g = (Point)a[0];  //Распаковка
                                    //Здесь ссылка(указатель) содержащаяся в элементе с номером 0 массива помещается в переменную p значимого тира Point
                                    //1. Извлекается адрес полей Point из упакованного объекта Point - это РАСПАКОВКА (Unboxing)
                                    //2. Значение полей копируются из кучи в экземпляр значимого типа, находящийся в стеке

        }
    }
}
